(function(){'use strict';function a(){return new Promise((a,b)=>{fetch(...arguments).then(c=>c.ok?c.json().then(a,b):b(c),b)})}function b(b,d){if('object'==typeof d)for(let a in d){const c=d[a];b+=`+${a}:${c instanceof Array?c.join(','):c}`}return a(`${c}?q=${b}`)}const c='https://api.npms.io/v2/search';class d{static get(c,e={npmFilters:{not:['deprecated','insecure','unstable']}}){return new Promise(async(f,g)=>{let h;try{h=await b(c,e.npmFilters)}catch(a){return console.error('Error searching NPM registry.'),void g({msg:'Error searching NPM registry.',details:a})}if(0===h.total){const a=`No results found for ${c}.`;return console.error(a),void g({msg:a,details:h})}if(100>parseInt(h.results[0].searchScore)&&!('forcePackage'in e)){const a=`Couldn't find an exact match for ${c}.\n\n`+`Use wnpm.search to determine the correct package name or use the 'forcePackage' option with wnpm.get`;return console.error(a),void g({msg:a,details:h})}const i=e.forcePackage-1||0,j=h.results[i].package;if(null===j.links.repository.match(/github\.com/)){const a=`${j.name} does not use github as it's repository. Found ${j.links.respository}`;return console.error(a),void g({msg:a,details:j})}console.log(`Found ${c} as ${j.name} at ${j.version}; using ${j.links.repository}`);const k=j.links.repository.replace(/(^.*github\.com\/|\/$)/g,'');let l;try{if(l=await a(`${'https://api.github.com/repos'}/${k}/tags`),0===l.length)throw l}catch(a){const b=`No tags found for ${j.name}'s listed repo. Unable to pull stable release. Aborting`;return console.error(b),void g({msg:b,details:a})}const m=l.find(a=>a.name===j.version||`v${j.version}`===a.name);let n;'undefined'==typeof m?(n=l[0].name,console.warn(`Unable to find a suitable repo tag for version ${j.version}. Using the latest tag (${n}) instead.`)):n=m.name;let o;try{const b=await a(`${'https://gitcdn.link/repo'}/${k}/${n}/package.json`);console.log(`package.json retrieved`),b.dependencies instanceof Array&&0<b.dependencies.length&&console.log(`This package appears to have dependencies. You may have issues running this package.`),o=b.unpkg||b.main,console.log(`Loading package main file: ${o}`)}catch(a){const b=`Error retrieving package.json for ${j.name}. Status: ${a.status}`;console.error(b),g({msg:b,details:a})}try{await d.load(`${'https://gitcdn.link/repo'}/${k}/${n}/${o}`),console.log(`${j.name} loaded!`),f(j)}catch(a){console.error('An error occurred loading the script.'),g({msg:'An error occurred loading the script.',details:a})}})}static getAll(a,b){return Promise.all(a.map(a=>d.get(a,b)))}static load(a){return new Promise((b,c)=>{const d=document.createElement('SCRIPT');d.addEventListener('load',b,!1),d.addEventListener('error',c,!1),d.src=a,document.body.appendChild(d)})}static search(a='',c={}){return new Promise(async(d,f)=>{let e;try{e=await b(a,c)}catch(a){return console.error('Error searching NPM registry'),void f({msg:'Error searching NPM registry',details:a})}console.groupCollapsed(`${e.total} found for ${a}`),e.results.forEach((a,b)=>{console.groupCollapsed(`${b+1}. ${a.package.name}`),console.log(`Result score: ${parseInt(100*a.score.final)}%`),console.log(a.package.description),100>a.searchScore?console.log('%cThis package would not be selected automatically with wnpm.get','color: red'):console.log('%cThis package could be selected automatically with wnpm.get','color: green'),console.groupEnd()}),console.groupEnd(),d(e)})}}window.wnpm=d})();