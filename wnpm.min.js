(function(){'use strict';function a(){return new Promise((a,b)=>{fetch(...arguments).then(c=>c.ok?c.json().then(a,b):b(c),b)})}function b(b,d){if('object'==typeof d)for(let a in d){const c=d[a];b+=`+${a}:${c instanceof Array?c.join(','):c}`}return a(`${c}?q=${b}`)}const c='https://api.npms.io/v2/search';class d{static async get(c,e={npmFilters:{not:['deprecated','insecure','unstable']}}){let f;try{f=await b(c,e.npmFilters)}catch(a){return void console.error('Error searching NPM registry.',a)}if(0===f.total)return void console.error(`No results found for ${c}.`);if(100>parseInt(f.results[0].searchScore)&&!('forcePackage'in e))return void console.error(`Couldn't find an exact match for ${c}.\n\nUse wnpm.search to determine the correct package name or use the 'forcePackage' option with wnpm.get`);const g=e.forcePackage-1||0,h=f.results[g].package;if(null===h.links.repository.match(/github\.com/))return void console.error(`${h.name} does not use github as it's repository. Found ${h.links.respository}`);console.log(`Found ${c} as ${h.name} at ${h.version}; using ${h.links.repository}`);const i=h.links.repository.replace(/(^.*github\.com\/|\/$)/g,'');let j;try{if(j=await a(`${'https://api.github.com/repos'}/${i}/tags`),0===j.length)throw j}catch(a){return void console.error(`No tags found for ${h.name}'s listed repo. Unable to pull stable release. Aborting`)}const k=j.find(a=>a.name===h.version||`v${h.version}`===a.name);let l;'undefined'==typeof k?(l=j[0].name,console.warn(`Unable to find a suitable repo tag for version ${h.version}. Using the latest tag (${l}) instead.`)):l=k.name;let m;try{const b=await a(`${'https://gitcdn.link/repo'}/${i}/${l}/package.json`);console.log(`package.json retrieved`),b.dependencies instanceof Array&&0<b.dependencies.length&&console.log(`This package appears to have dependencies. You may have issues running this package.`),m=b.unpkg||b.main,console.log(`Loading package main file: ${m}`)}catch(a){console.error(`Error retrieving package.json for ${h.name}. Status: ${packageResponse.status}`)}try{d.load(`${'https://gitcdn.link/repo'}/${i}/${l}/${m}`),console.log(`${h.name} loaded!`)}catch(a){console.error('An error occurred loading the script.',a)}}static load(a){return new Promise((b,c)=>{const d=document.createElement('SCRIPT');d.addEventListener('load',b,!1),d.addEventListener('error',c,!1),d.src=a,document.body.appendChild(d)})}static async search(a='',c={}){let d;try{d=await b(a,c)}catch(a){return void console.error('Error searching NPM registry')}console.groupCollapsed(`${d.total} found for ${a}`),d.results.forEach((a,b)=>{console.groupCollapsed(`${b+1}. ${a.package.name}`),console.log(`Result score: ${parseInt(100*a.score.final)}%`),console.log(a.package.description),100>a.searchScore?console.log('%cThis package would not be selected automatically with wnpm.get','color: red'):console.log('%cThis package could be selected automatically with wnpm.get','color: green'),console.groupEnd()}),console.groupEnd()}}window.wnpm=d})();