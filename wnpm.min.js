!function(){"use strict";const e=(...e)=>fetch(...e).then(e=>{if(e.ok)return e.json();throw Error(`Fetch failed: ${e.status} ${e.statusText}`)}),o=async(o,t)=>{switch(t){case"github":return await(async o=>{if(null===o.links.repository.match(/github\.com/)){const e=`${o.name} does not use github as it's repository. Found ${o.links.respository}`;throw console.error(e),new Error({msg:e,details:o})}console.log(`Loading via GitHub using ${o.links.respository}`);const t=o.links.repository.replace(/(^.*github\.com\/|\/$)/g,"");let r;try{if(r=await e(`https://api.github.com/repos/${t}/tags`),0===r.length)throw r}catch(e){const t=`No tags found for ${o.name}'s listed repo. Unable to pull stable release. Aborting`;throw console.error(t),new Error({msg:t,details:e})}const n=r.find(e=>e.name===o.version||e.name===`v${o.version}`);let s;return void 0===n?(s=r[0].name,console.warn(`Unable to find a suitable repo tag for version ${o.version}. Using the latest tag (${s}) instead.`)):s=n.name,`https://cdn.jsdelivr.net/gh//${t}/${s}`})(o);case"unpkg":return((e,o)=>`${o}/${e.name}@${e.version}`)(o,"https://unpkg.com")}},t=(o,t)=>{if("object"==typeof t)for(let e in t){const r=t[e];Array.isArray(r)?r.forEach(t=>o+=` ${e}:${t}`):o+=` ${e}:${r}`}return e(`https://registry.npmjs.org/-/v1/search?text=${encodeURIComponent(o)}`)};class r extends Error{constructor(e,o){super(e),this.details=o}}class n{static async get(s,a){const{filters:c,forcePackage:i,cdnProviders:l,filePath:g}=Object.assign({},{filters:{not:["deprecated","insecure","unstable"]},cdnProviders:["unpkg","github"]},a);let d;try{d=await t(s,c)}catch(e){const o="Error searching NPM registry.";throw console.error(o),new r(o,e)}if(0===d.total){const e=`No results found for ${s}.`;throw console.error(e),new r(e,d)}if(parseInt(d.objects[0].searchScore)<100&&!i){const e=`Couldn't find an exact match for ${s}.\n\n`+"Use wnpm.search to determine the correct package name or use the 'forcePackage' option with wnpm.get";throw console.error(e),new r(e,d)}const p=i-1||0,u=d.objects[p].package;console.log(`Found ${s} as ${u.name} at ${u.version}; using ${u.links.repository}`);let h,w,f,$=!1;for(let e of l)try{h=await o(u,e),$=!0;break}catch(o){console.warn(`Could not generate a CDN URL for ${e}`)}if(!$){const e="Couldn't generate a CDN URL for any provider";throw console.error(e),new r(e,u)}try{const o=await e(`${h}/package.json`);console.log("package.json retrieved"),o.dependencies instanceof Array&&o.dependencies.length>0&&console.log("This package appears to have dependencies. You may have issues running this package."),f="unpkg"in o&&"string"==typeof o.unpkg?"unpkg":"browser"in o&&"string"==typeof o.browser?"browser":"main",w=g||o[f]||"index.js",console.log(`Loading package ${f} file: ${w}`)}catch(e){const o=`Error retrieving package.json for ${u.name}. Status: ${e.status}`;throw console.error(o),new r(o,e)}try{return await n.load(`${h}/${w}`),console.log(`${u.name} loaded!`),u}catch(e){const o="An error occurred loading the script.";throw console.error(o),new r(o,e)}}static getAll(e,o){return Promise.all(e.map(e=>n.get(e,o)))}static load(e){return new Promise((o,t)=>{const r=document.createElement("SCRIPT");r.addEventListener("load",o,!1),r.addEventListener("error",t,!1),r.src=e,document.body.appendChild(r)})}static async search(e="",o={}){let n;try{n=await t(e,o)}catch(e){const o="Error searching NPM registry";throw console.error(o),new r(o,e)}return console.groupCollapsed(`${n.total} found for ${e}`),n.objects.forEach((e,o)=>{console.groupCollapsed(`${o+1}. ${e.package.name}`),console.log(`Result score: ${parseInt(100*e.score.final)}%`),console.log(e.package.description),e.searchScore<100?console.log("%cThis package would not be selected automatically with wnpm.get","color: red"):console.log("%cThis package could be selected automatically with wnpm.get","color: green"),console.groupEnd()}),console.groupEnd(),n}}window.wnpm=n,console.info("WNPM v1.0.2 loaded")}();
