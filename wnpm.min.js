!function(){"use strict";const e=(...e)=>fetch(...e).then(e=>{if(e.ok)return e.json();throw Error(`Fetch failed: ${e.status} ${e.statusText}`)}),o=async(o,t)=>{switch(t){case"github":return await(async o=>{if(null===o.links.repository.match(/github\.com/)){const e=`${o.name} does not use github as it's repository. Found ${o.links.respository}`;throw console.error(e),new Error({msg:e,details:o})}console.log(`Loading via GitHub using ${o.links.respository}`);const t=o.links.repository.replace(/(^.*github\.com\/|\/$)/g,"");let r;try{if(r=await e(`https://api.github.com/repos/${t}/tags`),0===r.length)throw r}catch(e){const t=`No tags found for ${o.name}'s listed repo. Unable to pull stable release. Aborting`;throw console.error(t),new Error({msg:t,details:e})}const n=r.find(e=>e.name===o.version||e.name===`v${o.version}`);let s;return void 0===n?(s=r[0].name,console.warn(`Unable to find a suitable repo tag for version ${o.version}. Using the latest tag (${s}) instead.`)):s=n.name,`https://cdn.jsdelivr.net/gh//${t}/${s}`})(o);case"unpkg":return((e,o)=>`${o}/${e.name}@${e.version}`)(o,"https://unpkg.com")}},t=(o,t)=>{if("object"==typeof t)for(let e in t){const r=t[e];o+=`+${e}:${r instanceof Array?r.join(","):r}`}return e(`https://api.npms.io/v2/search?q=${o}`)};class r{static async get(n,s){const{npmFilters:a,forcePackage:c,cdnProviders:i,filePath:l}=Object.assign({},{npmFilters:{not:["deprecated","insecure","unstable"]},cdnProviders:["unpkg","github"]},s);return new Promise(async(s,g)=>{let d;try{d=await t(n,a)}catch(e){const o="Error searching NPM registry.";return console.error(o),void g({msg:o,details:e})}if(0===d.total){const e=`No results found for ${n}.`;return console.error(e),void g({msg:e,details:d})}if(parseInt(d.results[0].searchScore)<100&&!c){const e=`Couldn't find an exact match for ${n}.\n\n`+"Use wnpm.search to determine the correct package name or use the 'forcePackage' option with wnpm.get";return console.error(e),void g({msg:e,details:d})}const u=c-1||0,p=d.results[u].package;console.log(`Found ${n} as ${p.name} at ${p.version}; using ${p.links.repository}`);let h,m,f,$=!1;for(let e of i)try{h=await o(p,e),$=!0;break}catch(o){console.warn(`Could not generate a CDN URL for ${e}`)}if(!$){const e="Couldn't generate a CDN URL for any provider";return console.error(e),void g({msg:e,details:p})}try{const o=await e(`${h}/package.json`);console.log("package.json retrieved"),o.dependencies instanceof Array&&o.dependencies.length>0&&console.log("This package appears to have dependencies. You may have issues running this package."),f="unpkg"in o&&"string"==typeof o.unpkg?"unpkg":"browser"in o&&"string"==typeof o.browser?"browser":"main",m=l||o[f]||"index.js",console.log(`Loading package ${f} file: ${m}`)}catch(e){const o=`Error retrieving package.json for ${p.name}. Status: ${e.status}`;console.error(o),g({msg:o,details:e})}try{await r.load(`${h}/${m}`),console.log(`${p.name} loaded!`),s(p)}catch(e){const o="An error occurred loading the script.";console.error(o),g({msg:o,details:e})}})}static getAll(e,o){return Promise.all(e.map(e=>r.get(e,o)))}static load(e){return new Promise((o,t)=>{const r=document.createElement("SCRIPT");r.addEventListener("load",o,!1),r.addEventListener("error",t,!1),r.src=e,document.body.appendChild(r)})}static search(e="",o={}){return new Promise(async(r,n)=>{let s;try{s=await t(e,o)}catch(e){const o="Error searching NPM registry";return console.error(o),void n({msg:o,details:e})}console.groupCollapsed(`${s.total} found for ${e}`),s.results.forEach((e,o)=>{console.groupCollapsed(`${o+1}. ${e.package.name}`),console.log(`Result score: ${parseInt(100*e.score.final)}%`),console.log(e.package.description),e.searchScore<100?console.log("%cThis package would not be selected automatically with wnpm.get","color: red"):console.log("%cThis package could be selected automatically with wnpm.get","color: green"),console.groupEnd()}),console.groupEnd(),r(s)})}}window.wnpm=r,console.info("WNPM v1.0.2 loaded")}();
